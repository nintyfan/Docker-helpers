#!/bin/bash

function xmessage
{
if which tao-dialog &> /dev/null; then
	tao-dialog xmessage "$@" &> /dev/null
	result=$?
	if [[ $result -eq 1 ]]; then
	  command xmessage "$@"
	  result=$?
	fi
else
	command xmessage "$@"
	result=$?
fi
return $result
}

while ! systemctl status docker; do
   xmessage "Docker daemon not running. Provide password to ran it"
   systemctl --no-pager start docker 2>&1 > /dev/null
done


show_message()
{
   
   if [[ "z$message_type" == "z" ]] || [[ "$message_type" == "all" ]]; then 
      echo "$@"
      if [[ "$WAIT_TO_RESPONSE" == TRUE ]]; then
         xmessage "$@"
      else
         xmessage "$@" &
      fi
   elif [[ "$message_type" == "console" ]]; then 
       echo "$@"
       if [[ "$WAIT_TO_RESPONSE" == TRUE ]]; then
          echo "Type enter to procedd"
          read mesh
       fi
   elif [[ "$message_type" == "gui" ]]; then 
      if [[ "$WAIT_TO_RESPONSE" == TRUE ]]; then
         xmessage "$@"
      else
         xmessage "$@" &
      fi
   fi
}

show_message_force_user_seen()
{
   if [[ "$message_type" == "all" ]] || [[ "$message_type" != "gui" ]]; then 
      echo "$@"
      fi
      
      if [[ "$message_type" == "all" ]] || [[ "$message_type" != "console" ]]; then 
         xmessage "$@" 
         fi
}

show_message_with_options()
{
   
   options=$1
   shift
   if [[ "$message_type" != "" ]] && [[ "$message_type" != "gui" ]] && [[ "$message_type" != "all" ]]; then 
      
        while read -p "$*"\ "[$options]" answer; do answer=${answer%$\n}; answer_number=0; for a in `echo $options |  tr  ',' ' '`; do found=false; echo $a; if [[ "$a" == "$answer" ]]; then found=true; break; fi; answer_number=$(( $answer_number + 1 )); done; if [[ $found == "true" ]]; then break; fi; done
           
        return $answer_number
         
   else 
      xmessage -buttons "$options" "$@"
      return $(( $? - 100 ))
   fi
}

resultof()
{
   eval "$@"
   echo $?
}

show_message running...
show_message docker run -d -e XDG_RUNTIME_DIR=/tmp -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:/tmp/$WAYLAND_DISPLAY "$@"
cid=`docker run -d -e XDG_RUNTIME_DIR=/tmp -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:/tmp/$WAYLAND_DISPLAY "$@"`

declare done=false
result="None"
root_shell_opened=False
while [[ x"$done" == x"false" ]]; do
while [[ "$result" != "3" ]]; do

   result=`resultof show_message_with_options "\"User Shell\",\"Root Shell\",Done" What to do now?`
   
   if [[ "$result" == "2" ]]; then
      root_shell_opened=True
      xdg-terminal "docker exec -ti $cid /bin/bash -c \"echo $run_container_gui_message_root_shell; su root\"" &
   elif [[ "$result" == "1" ]]; then
      xdg-terminal "docker exec -ti $cid /bin/bash -c \"echo $run_container_gui_message_user_shell;su $USER\"" &
   fi
done
#show_message_force_user_seen now type \"docker exec -ti $cid /bin/bash\" to login as root or  \"docker exec -ti $cid su $USER\"
if [[ "$run_container_gui_message" != '' ]]; then show_message_force_user_seen $run_container_gui_message; fi
   echo 1
   echo \"$result\"
   echo 2
   
  result=`resultof show_message_with_options "ok,back" to end work click ok`
  if [[ x"$result" == x"1" ]]; then
	  done=true
  fi
done

docker stop $cid

docker wait $cid

if [[ "$root_shell_opened" == "True" ]]; then
   WAIT_TO_RESPONSE=TRUE show_message "You logged into root shell. Think about commit"
fi

result=`resultof show_message_with_options "Yes,No,Commit" Remove killed container or commit it\?`

if [[ $result -eq 1 ]]; then
   docker rm $cid
elif [[ $result -eq 2 ]]; then
  show_message Did no removing
elif [[ $result -eq 3 ]]; then
   xdg-terminal "/bin/bash -c \"while ! read -p type\\ tag tag; do echo Bad; done; docker commit $cid "\$tag";\""
   #xdg-terminal "/bin/bash -c \"while ! read -p type\\ tag tag; do echo Bad; done; docker commit $cid \\\"\$tag\\\"\";\""
#  xdg-terminal "/bin/bash -c \"while ! read -p type\\ tag tag; do echo Bad; done; docker commit $cid \\\"\$tag\\\";"  
fi

#xdg-terminal "/bin/bash -c \"while read -p Remove\ killed\ container\ or\ commit\ it?\ \\\"[Y|N|C]\\\" answer; do answer=\${answer%$'\n'};  if [[ \\\""\$answer"\\\" == 'C' ]]; then  while ! read -p type\ tag tag; do echo Bad; done; docker commit $cid \\\"\$tag\\\"; exit; fi;  if [[ \\\""\$answer"\\\" == 'Y' ]]; then docker rm  $cid; exit;  fi; if  [[ \\\""\$answer"\\\" == 'N' ]]; then exit; fi; echo Bad response: \\\""\$answer"\\\"; done\""  


if [[ `docker ps -q | wc -l` -eq 0 ]]; then
   show_message_force_user_seen "There is no docker images. Will stop docker now"
   systemctl stop docker
fi
